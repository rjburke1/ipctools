#ifndef __IPCTOOLS_ALLOCATOR_H__
#define __IPCTOOLS_ALLOCATOR_H__

/**
 * @addgroup Allocators
 * @{ */
typedef struct ipt_allocator_t ipt_allocator_t;

/**
 * Abstract allocator class.
 */
struct ipt_allocator_t
{
	/**
	 * Allocate a block of memory..
	 *
	 * @param[in] this The allocator's this pointer.
	 * @param[in] size The size of block to be allocated.
	 *
	 * @retval NULL  Successfully allocated block.
	 * @retval !NULL Failed to allocate block.
	 */
	void * (*malloc)(ipt_allocator_t *this, unsigned int size);

	/**
	 * Free a block of memory.
	 *
	 * @param[in] this The allocator's this pointer.
	 * @param[in] ptr  The pointer to block of memory previously allocated
	 *                 by this allocator.
	 *
	 * @retval NULL  Successfully allocated block.
	 * @retval !NULL Failed to allocate block.
	 */
	void (*free)(ipt_allocator_t *this, void *ptr);

	/**
	 * Register an allocated block of memory with a well-known name.
	 *
	 * @param[in] this The allocator's this pointer.
	 * @param[in] name The well-known name of the object.
	 * @param[in] ptr  The pointer to block of memory previously allocated
	 *                 by this allocator.
	 *
	 * @retval NULL  Successfully allocated block.
	 * @retval !NULL Failed to allocate block.
	 */
	int (*register_object)(ipt_allocator_t *this, const char *name, void *ptr);

	/**
	 * Deregister a previously allocated object.
	 *
	 * @param[in] this The allocator's this pointer.
	 * @param[in] name The name of previously registered object.
	 *
	 * @retval NULL  Successfully allocated block.
	 * @retval !NULL Failed to allocate block.
	 */
	int (*deregister_object)(ipt_allocator_t *this, const char *name);

	/**
	 * Find a registered allocated object.
	 *
	 * @param[in] this The allocator's this pointer.
	 * @param[in] name The name of the registered object.
	 *
	 * @retval NULL  Successfully allocated block.
	 * @retval !NULL Failed to allocate block.
	 */
	void * (*find_registered_object)(ipt_allocator_t *this, const char *name);
	
	/**
	 * Dump the basic allocator statistics.
	 *
	 * @param[in] this The allocator's this pointer.
	 *
	 * @retval NULL  Successfully allocated block.
	 * @retval !NULL Failed to allocate block.
	 */
	void (*dump_stats)(ipt_allocator_t *this);

	/**
	 * Get the size of the allocator.
	 *
	 * @param[in] this The allocator's this pointer.
	 *
	 *
	 * @retval unsigned int Size of the allocator.
	 */
	unsigned int (*get_size)(ipt_allocator_t *this);

	/**
	 * Destroy the allocator. 
	 *
	 * @param[in] this the allocator's this pointer.
	 */
	void (*destroy)(ipt_allocator_t *this);

	/**
	 * Blocks allocated.
	 *
	 * @param[in] this The allocator's this pointer.
	 *
	 * @retval 0  Successfully allocated block.
	 * @retval -1 Failed to allocate block.
	 */
	unsigned int (*blocks_allocated)(ipt_allocator_t *this);

	/**
	 * Bytes allocated.
	 *
	 * @param[in] this The allocator's this pointer.
	 *
	 * @retval 0  Successfully allocated block.
	 * @retval -1 Failed to allocate block.
	 */
	unsigned int (*bytes_allocated)(ipt_allocator_t *this);
};

int ipt_allocator_destroy(ipt_allocator_t *this);

/** @} */

#endif
