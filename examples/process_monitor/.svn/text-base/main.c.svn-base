#include <stdio.h>
#include <stdlib.h>

#include "allocator_shm.h"
#include "event_handler.h"
#include "process_monitor.h"
#include "reactor.h"

#define TEST_ALLOCATOR_SHM_KEY (5000)

ipt_process_monitor_t *pm_ptr;

struct handler
{
	ipt_event_handler_t eh;
};

static void
print_in_use_entry(process_monitor_entry_t *const entry, const void *data)
{
	if ( !entry->in_use ) return;

	printf("Process Monitor Entry[\n");
	printf("\tname=%s\n",entry->name);
	printf("\tpid=%i\n",entry->pid);
	printf("\tupdate_time=%d\n",entry->update_time);
	printf("\texpire_interval=%d\n",entry->expire_interval);

}

static void
create_managed_process(const char *name)
{
	if ( fork() == 0 )
	{ /* Child Process */

		ipt_allocator_t *alloc_ptr = ipt_allocator_shm_attach(TEST_ALLOCATOR_SHM_KEY);

		if ( alloc_ptr == NULL )
		{
			exit ( 1 );
		}

		ipt_reactor_t *reactor = ipt_reactor_create();

		if ( reactor == NULL )
		{
			exit ( 1 );
		}

		ipt_process_monitor_t *pm_ptr = ipt_process_monitor_attach("my_monitor_data",alloc_ptr);
	}
}

static int
handle_timeout(ipt_event_handler_t *this, const ipt_time_value_t *curr_time, const void *act)
{
	for_each( pm_ptr, print_in_use_entry, act); 

	return 0;
}

int main(int argc, char *argv[])
{

	struct handler handler;

	handler.eh.handle_timeout = handle_timeout;

	ipt_allocator_t *alloc_ptr;

	alloc_ptr = (ipt_allocator_t *)ipt_allocator_shm_create(1024*1024 ,TEST_ALLOCATOR_SHM_KEY);

	if ( alloc_ptr == NULL )
	{
		return -1;
	}

	pm_ptr = ipt_process_monitor_create("cn_process_monitor_t",alloc_ptr);

	if ( pm_ptr == NULL )
	{
		printf("failed to create\n");
		return -1;
	}

	ipt_reactor_t *reactor = ipt_reactor_create();

	if ( reactor == NULL )
	{
		return -1;
	}

	ipt_time_value_t tv = { 1, 0 };

	if ( reactor->schedule_timer(reactor,(ipt_event_handler_t *) &handler, NULL, &tv, NULL ) < 0 )
	{
		return -1;
	}

	while ( 1 )
	{
		reactor->run_event_loop(reactor,&tv);
	}

	return 0;
}
