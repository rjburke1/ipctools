#include "allocator_shm.h"
#include "config.h"
#include <stdio.h>
#include <string.h>
#include <assert.h>

#define SEGMENT_SIZE 1024

int test_1(ipt_allocator_t *alloc_ptr)
{

      /* should not be able to allocate sement */
      void * ptr = alloc_ptr->malloc( alloc_ptr, 2 * SEGMENT_SIZE);

      assert( ptr == NULL );
}

int test_2(ipt_allocator_t *alloc_ptr)
{

   /* Make sure our free/malloc is working. If there is a leak this will fail. */
   int i;
   for( i=0; i<  SEGMENT_SIZE / 512 * 10000; i++)
   {
      void *ptr = alloc_ptr->malloc( alloc_ptr, 512);

      assert ( ptr != NULL );

      alloc_ptr->free(alloc_ptr, ptr );
   }

   assert ( alloc_ptr->blocks_allocated(alloc_ptr) == 0 );
}

void test_3(ipt_allocator_t *alloc_ptr)
{
	void * ptr_1 = alloc_ptr->malloc(alloc_ptr, 100);
	void * ptr_2 = alloc_ptr->malloc(alloc_ptr, 100);
	void * ptr_3 = alloc_ptr->malloc(alloc_ptr, 100);

	alloc_ptr->free(alloc_ptr, ptr_1);
	alloc_ptr->free(alloc_ptr, ptr_2);
	alloc_ptr->free(alloc_ptr, ptr_3);

	assert ( alloc_ptr->blocks_allocated(alloc_ptr) == 0 );

	ptr_1 = alloc_ptr->malloc(alloc_ptr, 100);
	ptr_2 = alloc_ptr->malloc(alloc_ptr, 100);
	ptr_3 = alloc_ptr->malloc(alloc_ptr, 100);

	alloc_ptr->free(alloc_ptr, ptr_3);
	alloc_ptr->free(alloc_ptr, ptr_2);
	alloc_ptr->free(alloc_ptr, ptr_1);

	assert ( alloc_ptr->blocks_allocated(alloc_ptr) == 0 );

	ptr_1 = alloc_ptr->malloc(alloc_ptr, 100);
	ptr_2 = alloc_ptr->malloc(alloc_ptr, 100);
	ptr_3 = alloc_ptr->malloc(alloc_ptr, 100);

	alloc_ptr->free(alloc_ptr, ptr_1);
	alloc_ptr->free(alloc_ptr, ptr_3);
	alloc_ptr->free(alloc_ptr, ptr_2);

	assert ( alloc_ptr->blocks_allocated(alloc_ptr) == 0 );

	ptr_1 = alloc_ptr->malloc(alloc_ptr, 100);
	ptr_2 = alloc_ptr->malloc(alloc_ptr, 100);
	ptr_3 = alloc_ptr->malloc(alloc_ptr, 100);

	alloc_ptr->free(alloc_ptr, ptr_2);
	alloc_ptr->free(alloc_ptr, ptr_3);
	alloc_ptr->free(alloc_ptr, ptr_1);

	assert ( alloc_ptr->blocks_allocated(alloc_ptr) == 0 );

	ptr_1 = alloc_ptr->malloc(alloc_ptr, 100);
	ptr_2 = alloc_ptr->malloc(alloc_ptr, 100);
	ptr_3 = alloc_ptr->malloc(alloc_ptr, 100);

	alloc_ptr->free(alloc_ptr, ptr_2);
	alloc_ptr->free(alloc_ptr, ptr_1);
	alloc_ptr->free(alloc_ptr, ptr_3);

	assert ( alloc_ptr->blocks_allocated(alloc_ptr) == 0 );

	ptr_1 = alloc_ptr->malloc(alloc_ptr, 100);
	ptr_2 = alloc_ptr->malloc(alloc_ptr, 100);
	ptr_3 = alloc_ptr->malloc(alloc_ptr, 100);

	alloc_ptr->free(alloc_ptr, ptr_3);
	alloc_ptr->free(alloc_ptr, ptr_1);
	alloc_ptr->free(alloc_ptr, ptr_2);

	assert ( alloc_ptr->blocks_allocated(alloc_ptr) == 0 );

}

int main( int argc, char *argv[])
{
	unsigned int i;

	ipt_allocator_t *alloc_ptr;

	alloc_ptr = ipt_allocator_shm_create(1024 ,IPT_TEST_ALLOCATOR_SHM_KEY);

   	if ( alloc_ptr == NULL )
   	{
      		printf("Failed to create allocator.\n");
      		return -1;
   	}

   	test_1(alloc_ptr); 
   
   	test_2(alloc_ptr);

  	test_3(alloc_ptr);

	printf("Completed allocator test successfully.\n");

	return 0;
}
